<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:p="http://www.springframework.org/schema/p"
	xmlns:mvc="http://www.springframework.org/schema/mvc"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:aop="http://www.springframework.org/schema/aop" 
	xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="http://www.springframework.org/schema/beans
	http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
	http://www.springframework.org/schema/context
	http://www.springframework.org/schema/context/spring-context.xsd
	http://www.springframework.org/schema/mvc
	http://www.springframework.org/schema/mvc/spring-mvc-3.0.xsd
	http://www.springframework.org/schema/tx 
    http://www.springframework.org/schema/tx/spring-tx-3.0.xsd
    http://www.springframework.org/schema/aop 
    http://www.springframework.org/schema/aop/spring-aop-3.0.xsd">
	<!-- 启动注解驱动的Spring MVC功能, 注册请求url和注解POJO类方法的映射-->
	<mvc:annotation-driven />
	<!-- 启动包扫描功能, 以便注册带有@Controller、@Service、@repository、@Component等注解的类成为spring的bean -->
	<context:component-scan base-package="com.slb.web.controller" />
	<context:component-scan base-package="com.slb.web.aspring.dal" />
	<context:component-scan base-package="com.slb.web.aspring.bll" />
	<!-- 对模型视图名称的解析, 在请求时模型视图名称添加前后缀 -->
	<bean class="org.springframework.web.servlet.view.InternalResourceViewResolver" >
		<property name="prefix" value="/"/>  
        <property name="suffix" value=".jsp"/>
	</bean>
	<!-- 默认访问跳转到登录页面(即定义无需Controller的url<->view直接映射) -->  
    <mvc:view-controller path="/" view-name="forward:/login.jsp"/>  
	
	
	<!-- SpringMVC在超出上传文件限制时, 会抛出org.springframework.web.multipart.MaxUploadSizeExceededException -->  
    <!-- 该异常是SpringMVC在检查上传的文件信息时抛出来的, 而且此时还没有进入到Controller方法中 -->  
    <bean class="org.springframework.web.servlet.handler.SimpleMappingExceptionResolver">  
        <property name="exceptionMappings">  
            <props>  
                <!-- 遇到MaxUploadSizeExceededException异常时, 自动跳转到/WEB-INF/error_fileupload.jsp页面 -->  
                <prop key="org.springframework.web.multipart.MaxUploadSizeExceededException">sys000</prop>  
                <!-- 处理其它异常(包括Controller抛出的) -->
                <prop key="java.sql.SQLException">sys001</prop>
                <prop key="java.lang.Throwable">sys002</prop>  
            </props>  
        </property>
    </bean>
    
    <!-- 继承自AuthorizingRealm的自定义Realm,即指定Shiro验证用户登录的类为自定义的ShiroDbRealm.java -->  
    <bean id="myRealm" class="com.slb.web.realm.MyRealm"/>  
  
    <!-- Shiro默认会使用Servlet容器的Session,可通过sessionMode属性来指定使用Shiro原生Session -->  
    <!-- 即<property name="sessionMode" value="native"/>,详细说明见官方文档 -->  
    <!-- 这里主要是设置自定义的单Realm应用,若有多个Realm,可使用'realms'属性代替 -->  
    <bean id="securityManager" class="org.apache.shiro.web.mgt.DefaultWebSecurityManager">  
        <property name="realm" ref="myRealm"/>  
    </bean>  
  
    <!-- Shiro主过滤器本身功能十分强大,其强大之处就在于它支持任何基于URL路径表达式的、自定义的过滤器的执行 -->  
    <!-- Web应用中,Shiro可控制的Web请求必须经过Shiro主过滤器的拦截,Shiro对基于Spring的Web应用提供了完美的支持 -->  
    <bean id="shiroFilter" class="org.apache.shiro.spring.web.ShiroFilterFactoryBean">  
        <!-- Shiro的核心安全接口,这个属性是必须的 -->  
        <property name="securityManager" ref="securityManager"/>  
        <!-- 要求登录时的链接(可根据项目的URL进行替换),非必须的属性,默认会自动寻找Web工程根目录下的"/login.jsp"页面 -->  
        <property name="loginUrl" value="/"/>  
        <!-- 登录成功后要跳转的连接(本例中此属性用不到,因为登录成功后的处理逻辑在LoginController里硬编码为main.jsp了) -->  
        <!-- <property name="successUrl" value="/jsp/index.jsp"/> -->  
        <!-- 用户访问未对其授权的资源时,所显示的连接 -->  
        <!-- 若想更明显的测试此属性可以修改它的值,如unauthor.jsp,然后用[玄玉]登录后访问/admin/listUser.jsp就看见浏览器会显示unauthor.jsp -->  
        <property name="unauthorizedUrl" value="/"/>  
        <!-- Shiro连接约束配置,即过滤链的定义 -->  
        <!-- 下面value值的第一个'/'代表的路径是相对于HttpServletRequest.getContextPath()的值来的 -->  
        <!-- anon：它对应的过滤器里面是空的,什么都没做,这里.do和.jsp后面的*表示参数,比方说login.jsp?main这种 -->  
        <!-- authc：该过滤器下的页面必须验证后才能访问,它是Shiro内置的一个拦截器org.apache.shiro.web.filter.authc.FormAuthenticationFilter -->  
        <property name="filterChainDefinitions">  
            <value>  
                <!-- 
                /aspring/login=anon  
                /aspring/getVerifyCodeImage=anon 
                /main**=authc  
                /user/info**=authc  
                /admin/listUser**=authc,perms[admin:manage] 

                /common/getverifycodeimage=anon
                /login**=anon
                /js/**=anon
                /css/**=anon  
                /img/**=anon 
                /fonts/**=anon 
                
                /index**=authc
                /business/in/**=authc,perms[admin:manager]
				/business/**=authc           
                /**=authc 
                /login**=anon
				/index**=authc
		        /business/in/**=authc,perms[admin:manager]
				/business/**=authc
				-->         
				/login**=anon
				/common/getverifycodeimage=anon
				/jsp/gallery**=authc,perms[admin:001]
				/jsp/**=authc
				/user/**=authc
            </value>  
        </property>  
    </bean>  
    <!-- 保证实现了Shiro内部lifecycle函数的bean执行 --> 
    <bean id="lifecycleBeanPostProcessor" 
   		class="org.apache.shiro.spring.LifecycleBeanPostProcessor"/> 
    <!-- 开启Shiro的注解(如@RequiresRoles,@RequiresPermissions),需借助SpringAOP扫描使用Shiro注解的类,并在必要时进行安全逻辑验证 -->  
    <!-- 配置以下两个bean即可实现此功能 -->  
    <!-- Enable Shiro Annotations for Spring-configured beans. Only run after the lifecycleBeanProcessor has run -->  
    <!-- 由于本例中并未使用Shiro注解,故注释掉这两个bean(个人觉得将权限通过注解的方式硬编码在程序中,查看起来不是很方便,没必要使用) -->  
    <!--   
    <bean class="org.springframework.aop.framework.autoproxy.DefaultAdvisorAutoProxyCreator" depends-on="lifecycleBeanPostProcessor"/>  
    <bean class="org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor">  
        <property name="securityManager" ref="securityManager"/>  
    </bean>  
     -->
     <bean id="captchaProducer" class="com.google.code.kaptcha.impl.DefaultKaptcha">  
        <property name="config">  
            <bean class="com.google.code.kaptcha.util.Config">  
                <constructor-arg>  
                    <props>  
                        <prop key="kaptcha.border">no</prop>  
                        <prop key="kaptcha.border.color">212, 63, 58</prop>  
                        <prop key="kaptcha.textproducer.font.color">black</prop>  
                        <prop key="kaptcha.image.width">250</prop>  
                        <prop key="kaptcha.textproducer.font.size">28</prop>  
                        <prop key="kaptcha.image.height">30</prop>  
                        <prop key="kaptcha.session.key">code</prop>  
                        <prop key="kaptcha.textproducer.char.length">4</prop>  
                        <prop key="kaptcha.textproducer.font.names">"Courier New" , Courier, mono, serif</prop>  
                    </props>  
                </constructor-arg>  
            </bean>  
        </property>  
    </bean>  
    <!-- 数据源配置文件  -->
    <context:property-placeholder location="WEB-INF/jdbc.properties"/>
   
    <!-- 创建数据源, apache.dbcp连接池的配置  -->  
    <bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource" destroy-method="close">  
        <property name="driverClassName" value="${jdbc.driverClassName}"></property>  
        <property name="url" value="${jdbc.url}"></property>  
        <property name="username" value="${jdbc.username}"></property>  
        <property name="password" value="${jdbc.password}"></property>  
        <!-- 最大活动连接数 -->  
        <property name="maxActive" value="${jdbc.maxActive}"></property>  
        <!-- 最大可空闲连接数 -->  
        <property name="maxIdle" value="${jdbc.maxIdle}"></property>  
        <!-- 最大可等待连接数 -->  
        <property name="maxWait" value="${jdbc.maxWait}"></property>  
        <!-- 默认的提交方式(如果不需要事务可以设置成true, 在实际应用中一般设置为false, 默认为false) -->  
        <property name="defaultAutoCommit" value="false"></property>  
    </bean> 
    <!-- jdbc注入 -->  
    <bean id="jdbcTemplate" class="org.springframework.jdbc.core.JdbcTemplate">  
        <property name="dataSource" ref="dataSource"></property>  
    </bean>
    <bean id="txManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource" />
    </bean>

    <tx:annotation-driven transaction-manager="txManager" />
    <!-- 声明式事务    
	<bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">    
	    <property name="dataSource" ref="dataSource"></property>
	</bean> 
	dao层方法需满足method name规则, 以下列单词开头命名方法名 
	<tx:advice id="txAdvice" transaction-manager="transactionManager">  
	    <tx:attributes>  
	        	<tx:method name="update*" propagation="REQUIRED"/>  
	            <tx:method name="save*" propagation="REQUIRED"/>  
	            <tx:method name="insert*" propagation="REQUIRED"/>  
	            <tx:method name="add*" propagation="REQUIRED"/>  
	            <tx:method name="create*" propagation="REQUIRED"/>  
	            <tx:method name="do*" propagation="REQUIRED"/>  
	            <tx:method name="del*" propagation="REQUIRED"/>  
	            <tx:method name="remove*" propagation="REQUIRED"/>  
		        <tx:method name="get*" read-only="true" />  
		        <tx:method name="query*" read-only="true" />  
		        <tx:method name="search*" read-only="true" />  
	    </tx:attributes>  
	</tx:advice> 
	<aop:config>  
	    <aop:pointcut id="serviceOperation" expression="execution(* com.slb.web.aspring.dal.*.*(..))" />  
	    <aop:advisor pointcut-ref="serviceOperation" advice-ref="txAdvice" />  
	</aop:config>  -->
    <!-- dao注入 
    <bean id="userDao" class="com.slb.web.aspring.dal.UserDAO">  
        <property name="jdbcTemplate" ref="jdbcTemplate"></property>  
    </bean>  --> 
</beans>